// warehouse.ts
import { State, setState, resetWarehouseState } from './state';
import { switchPage, updateProgressBar, showToast, toggleLoading } from './ui';
import { MARKUP_CONFIG } from './pricing';

function goToWarehouseStep(step: number) {
    updateProgressBar('trade-finance', step - 1);
    document.querySelectorAll('#page-warehouse .service-step').forEach(s => s.classList.remove('active'));
    document.getElementById(`warehouse-step-${step}`)?.classList.add('active');
}

function renderWarehousePage() {
    const page = document.getElementById('page-warehouse');
    if (!page) return;

    page.innerHTML = `
        <button class="back-btn">Back to Services</button>
        <div class="service-page-header">
            <h2>Find Warehousing Space</h2>
            <p class="subtitle">Search for short-term or long-term storage solutions globally.</p>
        </div>
        <div class="form-container">
             <div class="visual-progress-bar" id="progress-bar-trade-finance">
                <div class="progress-step"></div><div class="progress-step"></div><div class="progress-step"></div>
            </div>

            <!-- Step 1: Search -->
            <div id="warehouse-step-1" class="service-step">
                <form id="warehouse-search-form">
                    <h3>Find a Facility</h3>
                    <div class="form-section">
                        <div class="input-wrapper"><label for="warehouse-location">Location (City, Country)</label><input type="text" id="warehouse-location" required placeholder="e.g., Felixstowe, GB"></div>
                         <div class="input-wrapper"><label for="warehouse-pallets">Number of Pallets</label><input type="number" id="warehouse-pallets" required min="1"></div>
                    </div>
                     <div class="form-section">
                        <label class="checkbox-group-label">Special Requirements</label>
                        <div class="checkbox-grid" style="grid-template-columns: 1fr 1fr;">
                            <div class="checkbox-wrapper"><input type="checkbox" id="req-temp" name="requirements" value="temp"><label for="req-temp">Temperature Controlled</label></div>
                            <div class="checkbox-wrapper"><input type="checkbox" id="req-bonded" name="requirements" value="bonded"><label for="req-bonded">Bonded</label></div>
                            <div class="checkbox-wrapper"><input type="checkbox" id="req-hazmat" name="requirements" value="hazmat"><label for="req-hazmat">Hazardous Materials</label></div>
                        </div>
                    </div>
                    <div class="form-actions"><button type="submit" class="main-submit-btn">Search Facilities</button></div>
                </form>
            </div>

            <!-- Step 2: Results -->
            <div id="warehouse-step-2" class="service-step">
                <h3>AI-Generated Available Facilities (Example)</h3>
                <div id="warehouse-results-list" class="warehouse-results"></div>
                <div class="quote-confirmation-panel">
                    <h4>Please Note: This is an AI Simulation</h4>
                    <p>These are example facilities and prices generated by AI. A Vcanship agent will contact you to confirm the best available space and provide a final quote.</p>
                </div>
                 <div class="form-actions">
                    <button type="button" id="warehouse-back-to-search" class="secondary-btn">Back to Search</button>
                </div>
            </div>
            
            <!-- Step 3: Confirmation -->
            <div id="warehouse-step-3" class="service-step">
                 <div class="confirmation-container">
                    <h3>Booking Request Sent!</h3>
                    <p>Your request for warehousing space has been received. Our team will be in touch shortly to finalize the details.</p>
                    <div class="confirmation-tracking">
                        <h4>Reference ID</h4>
                        <div class="tracking-id-display" id="warehouse-reference-id"></div>
                    </div>
                    <div class="confirmation-actions">
                        <button id="warehouse-new-search-btn" class="main-submit-btn">New Search</button>
                    </div>
                </div>
            </div>
        </div>
    `;
}

async function handleWarehouseSearch(e: Event) {
    e.preventDefault();
    toggleLoading(true, "Searching for facilities...");

    const location = (document.getElementById('warehouse-location') as HTMLInputElement).value;
    const pallets = (document.getElementById('warehouse-pallets') as HTMLInputElement).value;
    const requirements = Array.from(document.querySelectorAll<HTMLInputElement>('input[name="requirements"]:checked')).map(cb => cb.value).join(', ') || 'None';

    const prompt = `
        Act as a commercial real estate agent for logistics. For a request for ${pallets} pallet spaces in ${location} with special requirements: ${requirements}, generate a list of 3 plausible but fictional warehouse facilities.
        For each facility, provide:
        - name (e.g., "Felixstowe Logistics Park")
        - types (an array of strings, e.g., ["Bonded", "Temp-Controlled"])
        - basePricePerPallet (a number, in ${State.currentCurrency.code})

        Format the output as a JSON array of objects.
    `;

    try {
        if (!State.api) throw new Error("AI API not initialized.");
        const response = await State.api.models.generateContent({
            model: "gemini-2.5-flash",
            contents: prompt,
            config: { responseMimeType: "application/json" }
        });
        
        const facilities = JSON.parse(response.text);
        const resultsList = document.getElementById('warehouse-results-list');
        if(resultsList) {
            resultsList.innerHTML = facilities.map((facility: any) => {
                 const markup = MARKUP_CONFIG.warehousing.standard;
                 const finalPrice = facility.basePricePerPallet * (1 + markup);

                 return `
                    <div class="facility-card">
                        <div class="facility-card-header">
                            <i class="fa-solid fa-warehouse"></i>
                            <h5>${facility.name}</h5>
                        </div>
                        <div class="facility-card-tags">
                            ${(facility.types || []).map((type: string) => `<span class="facility-tag">${type}</span>`).join('')}
                        </div>
                        <div class="facility-card-footer">
                            <div class="facility-card-price">
                                <strong>${State.currentCurrency.symbol}${finalPrice.toFixed(2)}</strong>
                                <p>/ pallet / week (est.)</p>
                            </div>
                            <button class="cta-button warehouse-book-btn">Request to Book</button>
                        </div>
                    </div>
                 `;
            }).join('');
        }
        goToWarehouseStep(2);
    } catch (error) {
        console.error("Warehouse search error:", error);
        showToast("Could not find facilities. Please try again.", "error");
    } finally {
        toggleLoading(false);
    }
}

function attachWarehouseEventListeners() {
    document.querySelector('#page-warehouse .back-btn')?.addEventListener('click', () => switchPage('landing'));
    document.getElementById('warehouse-search-form')?.addEventListener('submit', handleWarehouseSearch);
    document.getElementById('warehouse-back-to-search')?.addEventListener('click', () => goToWarehouseStep(1));

     document.getElementById('warehouse-results-list')?.addEventListener('click', (e) => {
        const target = e.target as HTMLElement;
        if (target.classList.contains('warehouse-book-btn')) {
            const refId = `WHS-${Date.now().toString().slice(-6)}`;
            (document.getElementById('warehouse-reference-id') as HTMLElement).textContent = refId;
            goToWarehouseStep(3);
            showToast("Request sent!", "success");
        }
    });

    document.getElementById('warehouse-new-search-btn')?.addEventListener('click', () => {
        resetWarehouseState();
        renderWarehousePage();
        attachWarehouseEventListeners();
        goToWarehouseStep(1);
    });
}

export function startWarehouse() {
    setState({ currentService: 'warehouse' });
    resetWarehouseState();
    renderWarehousePage();
    switchPage('warehouse');
    attachWarehouseEventListeners();
    goToWarehouseStep(1);
}
