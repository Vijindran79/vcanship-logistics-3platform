// baggage.ts
import { State, setState, resetBaggageState, Address } from './state';
import { switchPage, updateProgressBar, showToast, toggleLoading } from './ui';
import { MARKUP_CONFIG } from './pricing';

function goToBaggageStep(step: 'details' | 'quote' | 'payment' | 'confirmation') {
    const container = document.getElementById('page-baggage');
    if (!container) return;

    const steps = ['details', 'quote', 'payment', 'confirmation'];
    const currentStepIndex = steps.indexOf(step);
    updateProgressBar('baggage', currentStepIndex);

    document.querySelectorAll('#page-baggage .service-step').forEach(s => s.classList.remove('active'));
    document.getElementById(`baggage-step-${step}`)?.classList.add('active');
}

function renderBaggagePage() {
    const page = document.getElementById('page-baggage');
    if (!page) return;

    page.innerHTML = `
        <button class="back-btn">Back to Services</button>
        <div class="service-page-header">
            <h2>Send Personal Baggage</h2>
            <p class="subtitle">Avoid excess airline fees. Ship your bags ahead with us.</p>
        </div>
        <div class="form-container">
            <div class="visual-progress-bar" id="progress-bar-baggage">
                <div class="progress-step"></div><div class="progress-step"></div><div class="progress-step"></div><div class="progress-step"></div>
            </div>

            <!-- Step 1: Details -->
            <div id="baggage-step-details" class="service-step">
                <form id="baggage-details-form">
                    <h3>Shipment Details</h3>
                    <div class="input-wrapper">
                        <label for="baggage-service-type">Service Type</label>
                        <select id="baggage-service-type">
                            <option value="door-to-door">Door-to-Door</option>
                            <option value="door-to-airport">Door-to-Airport</option>
                            <option value="airport-to-door">Airport-to-Door</option>
                            <option value="airport-to-airport">Airport-to-Airport</option>
                        </select>
                    </div>

                    <div id="baggage-origin-fields">
                        <h4>Origin</h4>
                        <!-- Dynamic fields based on selection -->
                    </div>
                    <div id="baggage-destination-fields">
                        <h4>Destination</h4>
                        <!-- Dynamic fields based on selection -->
                    </div>

                    <div class="input-wrapper">
                        <label for="baggage-weight">Total Weight (kg)</label>
                        <input type="number" id="baggage-weight" required min="1">
                    </div>
                    
                    <div class="form-actions">
                        <button type="submit" class="main-submit-btn">Get Estimated Quote</button>
                    </div>
                </form>
            </div>

            <!-- Step 2: Quote -->
            <div id="baggage-step-quote" class="service-step">
                <h3>Your AI-Powered Estimate</h3>
                <div id="baggage-quote-container"></div>
                 <div class="quote-confirmation-panel">
                    <h4>Please Note: This is an AI Estimate</h4>
                    <p>This price is an estimate generated by our AI based on current market rates. A Vcanship agent will contact you via email to confirm the final details and provide an exact quote for your approval before any payment is required.</p>
                </div>
                <div class="form-actions">
                    <button type="button" id="baggage-back-to-details" class="secondary-btn">Back</button>
                    <button type="button" id="baggage-request-booking" class="main-submit-btn">Request Final Quote</button>
                </div>
            </div>
            
            <!-- Step 3 is skipped as it's an offline booking -->

            <!-- Step 4: Confirmation -->
            <div id="baggage-step-confirmation" class="service-step">
                 <div class="confirmation-container">
                    <h3>Booking Request Sent!</h3>
                    <p>Your baggage shipment request has been received. Our team will email you shortly with a final quote and booking instructions.</p>
                    <div class="confirmation-tracking">
                        <h4>Reference ID</h4>
                        <div class="tracking-id-display" id="baggage-reference-id"></div>
                    </div>
                    <div class="confirmation-actions">
                         <button id="baggage-new-shipment-btn" class="main-submit-btn">Book Another Shipment</button>
                    </div>
                </div>
            </div>
        </div>
    `;
}

function updateAddressFields(serviceType: string) {
    const originContainer = document.getElementById('baggage-origin-fields');
    const destContainer = document.getElementById('baggage-destination-fields');
    if (!originContainer || !destContainer) return;

    const addressHtml = (type: 'origin' | 'destination') => `
        <div class="input-wrapper"><label for="baggage-${type}-street">Street Address</label><input type="text" id="baggage-${type}-street" required></div>
        <div class="form-grid">
            <div class="input-wrapper"><label for="baggage-${type}-city">City</label><input type="text" id="baggage-${type}-city" required></div>
            <div class="input-wrapper"><label for="baggage-${type}-country">Country</label><input type="text" id="baggage-${type}-country" required></div>
        </div>
    `;
    const airportHtml = (type: 'origin' | 'destination') => `
        <div class="input-wrapper"><label for="baggage-${type}-airport">Airport Code (IATA)</label><input type="text" id="baggage-${type}-airport" required placeholder="e.g., LHR"></div>
    `;
    
    if (serviceType.startsWith('door-to')) {
        originContainer.innerHTML = addressHtml('origin');
    } else {
        originContainer.innerHTML = airportHtml('origin');
    }

    if (serviceType.endsWith('-to-door')) {
        destContainer.innerHTML = addressHtml('destination');
    } else {
        destContainer.innerHTML = airportHtml('destination');
    }
}


async function handleBaggageFormSubmit(e: Event) {
    e.preventDefault();
    toggleLoading(true, "Calculating your estimate...");

    const serviceType = (document.getElementById('baggage-service-type') as HTMLSelectElement).value;
    const weight = (document.getElementById('baggage-weight') as HTMLInputElement).value;
    
    let origin, destination;
    if (serviceType.startsWith('door-to')) {
        origin = `${(document.getElementById('baggage-origin-city') as HTMLInputElement).value}, ${(document.getElementById('baggage-origin-country') as HTMLInputElement).value}`;
    } else {
        origin = (document.getElementById('baggage-origin-airport') as HTMLInputElement).value;
    }
    if (serviceType.endsWith('-to-door')) {
        destination = `${(document.getElementById('baggage-destination-city') as HTMLInputElement).value}, ${(document.getElementById('baggage-destination-country') as HTMLInputElement).value}`;
    } else {
        destination = (document.getElementById('baggage-destination-airport') as HTMLInputElement).value;
    }

    const prompt = `
        Act as a logistics pricing expert. Provide an estimated cost for shipping personal baggage.
        - Service Type: ${serviceType}
        - Origin: ${origin}
        - Destination: ${destination}
        - Total Weight: ${weight} kg
        - Currency: ${State.currentCurrency.code}

        Provide a single estimated base cost as a number. Do not add any other text or formatting.
    `;

    try {
        if (!State.api) throw new Error("AI API not initialized.");
        const response = await State.api.models.generateContent({
            model: "gemini-2.5-flash",
            contents: prompt,
        });

        const baseCost = parseFloat(response.text);
        if (isNaN(baseCost)) throw new Error("Invalid AI response.");

        const markup = MARKUP_CONFIG.baggage.standard;
        const finalPrice = baseCost * (1 + markup);

        const quoteContainer = document.getElementById('baggage-quote-container');
        if (quoteContainer) {
            quoteContainer.innerHTML = `
                <div class="payment-overview">
                    <div class="review-item"><span>Service:</span><strong>${serviceType}</strong></div>
                    <div class="review-item"><span>Route:</span><strong>${origin} &rarr; ${destination}</strong></div>
                    <div class="review-item"><span>Weight:</span><strong>${weight} kg</strong></div>
                    <hr>
                    <div class="review-item total"><span>Estimated Total:</span><strong>${State.currentCurrency.symbol}${finalPrice.toFixed(2)}</strong></div>
                </div>
            `;
        }
        goToBaggageStep('quote');
    } catch (error) {
        console.error("Baggage quote error:", error);
        showToast("Could not generate an estimate. Please try again.", "error");
    } finally {
        toggleLoading(false);
    }
}


function attachBaggageEventListeners() {
    document.querySelector('#page-baggage .back-btn')?.addEventListener('click', () => switchPage('landing'));
    
    const serviceTypeSelect = document.getElementById('baggage-service-type') as HTMLSelectElement;
    serviceTypeSelect?.addEventListener('change', () => updateAddressFields(serviceTypeSelect.value));

    document.getElementById('baggage-details-form')?.addEventListener('submit', handleBaggageFormSubmit);
    
    document.getElementById('baggage-back-to-details')?.addEventListener('click', () => goToBaggageStep('details'));

    document.getElementById('baggage-request-booking')?.addEventListener('click', () => {
        const refId = `BGG-${Date.now().toString().slice(-6)}`;
        (document.getElementById('baggage-reference-id') as HTMLElement).textContent = refId;
        goToBaggageStep('confirmation');
        showToast("Request sent! We will be in touch.", "success");
    });
    
    document.getElementById('baggage-new-shipment-btn')?.addEventListener('click', () => {
        resetBaggageState();
        renderBaggagePage();
        attachBaggageEventListeners();
        goToBaggageStep('details');
        updateAddressFields('door-to-door');
    });
}


export function startBaggage() {
    setState({ currentService: 'baggage' });
    resetBaggageState();
    renderBaggagePage();
    switchPage('baggage');
    attachBaggageEventListeners();
    goToBaggageStep('details');
    updateAddressFields('door-to-door');
}
